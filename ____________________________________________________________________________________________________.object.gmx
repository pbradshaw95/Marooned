<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_deactivate_all(true)

onResume = true
onExit = false
onExitNo = false
onExitYes = false
select = false
start = false

alpha = 1

exitPrompt = false
prevLH = 0
up = false
down = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alpha == 1) {
    fadeIn = false
    fadeOut = true
}
if (alpha &lt;= .1) {
    fadeOut = false
    fadeIn = true
}
if (fadeOut) {
    alpha -= .02
}
if (fadeIn) {
    alpha += .02
}

    if (keyboard_check_pressed(ord("K")) or
        gamepad_button_check_pressed(0, gp_face1)){
        select = true
    }
    else {
        select = false
    }
    
    start = gamepad_button_check_pressed(0, gp_start) or 
            keyboard_check_pressed(vk_enter) or
            keyboard_check_pressed(vk_escape)
    
    up = (keyboard_check_pressed(ord("W")) or 
        ((gamepad_axis_value(0, gp_axislv) &lt; -.2) and prevLH &gt; -.2) or 
        gamepad_button_check_pressed(0,gp_padu))
    down = (keyboard_check_pressed(ord("S")) or 
        ((gamepad_axis_value(0, gp_axislv) &gt; .2) and prevLH &lt; .2) or 
        gamepad_button_check_pressed(0,gp_padd))

// Exiting Navigation
if (exitPrompt) {
    if(up or down) {
        if (onExitYes) {
            onExitYes = false
            onExitNo = true
        }
        else if (onExitNo) {
            onExitNo = false
            onExitYes = true
        }
    }
}

// Cursor Navigation (pressed W or S)
if (!exitPrompt) {
    if (down) {
        if (onExit) {
            onExit = false
            onResume = true
        }
        else if (onResume) {
            onResume = false
            onExit = true
        }
    }

    if (up) {
        if (onResume) {
            onResume = false
            onExit = true
        }
        else if (onExit) {
            onExit = false
            onResume = true
        }
    }
}

// Selection (Pressed A)
    if (onExitYes and select) {
        room_goto(Rm_Title)
    }
    else if (onExitNo and select) {
        onExitNo = false
        exitPrompt = false
        onExit = true
    }
    else if (onExit and select) {
        exitPrompt = true
        onExitNo = true
    }
    else if (onResume and select) {
        draw_set_alpha(1)
        instance_activate_all()
        instance_destroy()
    }
    if (start) {
        draw_set_alpha(1)
        instance_activate_all()
        instance_destroy()
    }

prevLH = gamepad_axis_value(0, gp_axislv)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>Obj_Pause</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(.5)
draw_set_color(c_black)
draw_rectangle(0,0,1024,768,false)
draw_set_alpha(1)
draw_set_color(c_white)
draw_set_font(Fnt_Heading)
draw_set_halign(fa_center)
draw_text( 256*2, 384*2 / 10, "Paused")
draw_set_alpha(.3)
draw_set_font(Fnt_Instructions)

if (!exitPrompt) {
        draw_set_alpha(.3)
        draw_text(256*2, 384, "Resume")
        draw_text(256*2, 384 + 100, "Exit")

    if (onResume) {
        draw_set_alpha(alpha)
        draw_text(256*2, 384, "Resume")
    }

    if (onExit) {
        draw_set_alpha(alpha)
        draw_text(256*2, 384 + 100, "Exit")
    }
}

else {
    draw_text(256*2, 384*2 / 3, "Exit to Title?")
    draw_set_alpha(.3)
    draw_text(256*2, (384*2 / 3) + 100, "No")
    draw_text(256*2, (384*2 / 3) + 200, "Yes")
        
    if (onExitNo) {
        draw_set_alpha(alpha)
        draw_text(256*2, (384*2 / 3) + 100, "No")
    }
    
    if (onExitYes) {
        draw_set_alpha(alpha)
        draw_text(256*2, (384*2 / 3) + 200, "Yes")
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
