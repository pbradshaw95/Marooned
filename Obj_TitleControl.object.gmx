<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y0 = 1
y1 = 1
y2 = 1
y3 = 1
y4 = 2

alarm[0] = 120
alarm[1] = 60
alarm[2] = 45
alarm[3] = 30
alarm[4] = 180

alpha = 1

xVal = 0

onPress = true
onPlay = false
onContinue = false
onNewGame = false
onNewGameYes = false
onNewGameNo = false
onReturn = false
onSettings = false
onExit = false
onExitNo = false
onExitYes = false
select = false

global.c_sky = make_colour_rgb(133, 215, 215)

exitPrompt = false
playPrompt = false
newGamePrompt = false
prevLH = 0
up = false
down = false

ini_open("SaveData.ini")
target = ini_read_real("Room", "SaveStation", Rm_1)
ini_close()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[4] = 210
y4 = -y4
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[3] = 30
y3 = -y3
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[2] = 45
y2 = -y2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = 60
y1 = -y1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 120
y0 = -y0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alpha = 1) {
    fadeIn = false
    fadeOut = true
}
if (alpha = .1) {
    fadeOut = false
    fadeIn = true
}
if (fadeOut) {
    alpha -= .02
}
if (fadeIn) {
    alpha += .02
}

if(!onPress) {
    if (keyboard_check_pressed(vk_enter) or
        keyboard_check_pressed(ord("K")) or
        gamepad_button_check_pressed(0, gp_face1) or
        gamepad_button_check_pressed(0, gp_start)) {
        select = true
    }
    else {
        select = false
    }
    
    up = (keyboard_check_pressed(ord("W")) or 
        ((gamepad_axis_value(0, gp_axislv) &lt; -.2) and prevLH &gt; -.2) or 
        gamepad_button_check_pressed(0,gp_padu))
    down = (keyboard_check_pressed(ord("S")) or 
        ((gamepad_axis_value(0, gp_axislv) &gt; .2) and prevLH &lt; .2) or 
        gamepad_button_check_pressed(0,gp_padd))
}

// Exiting Navigation
if (exitPrompt) {
    if(up or down) {
        if (onExitYes) {
            onExitYes = false
            onExitNo = true
        }
        else if (onExitNo) {
            onExitNo = false
            onExitYes = true
        }
    }
}

// Cursor Navigation (pressed W or S)
if (!exitPrompt) {
    if (down) {
        if (onExit) {
            onExit = false
            onPlay = true
        }
        else if (onSettings) {
            onSettings = false
            onExit = true
        }
        else if (onPlay) {
            onPlay = false
            onSettings = true
        }
    }

    if (up) {
        if (onPlay) {
            onPlay = false
            onExit = true
        }
        else if (onSettings) {
            onSettings = false
            onPlay = true
        }
        else if (onExit) {
            onExit = false
            onSettings = true
        }
    }
}

// Play navigation     
if (playPrompt) {
    if(up) {
        if (onContinue) {
            onContinue = false
            onReturn = true
        }
        else if (onNewGame) {
            onNewGame = false
            onContinue = true
        }
        else if (onReturn) {
            onReturn = false
            onNewGame = true
        }
        
    }
    if (down) {
        if(onReturn) {
            onReturn = false
            onContinue = true
        }
        else if (onNewGame) {
            onNewGame = false
            onReturn = true
        }
        else if (onContinue) {
            onContinue = false
            onNewGame = true
        }
    }
}

// New Game Navigation
if (newGamePrompt) {
    if(up or down) {
        if (onNewGameYes) {
            onNewGameYes = false
            onNewGameNo = true
        }
        else if (onNewGameNo) {
            onNewGameNo = false
            onNewGameYes = true
        }
    }
}

// Selection (Pressed A)
if (!onPress) {
    if (onExitYes and select) {
        game_end()
    }
    else if (onExitNo and select) {
        onExitNo = false
        exitPrompt = false
        onExit = true
    }
    else if (onExit and select) {
        exitPrompt = true
        onExitNo = true
    }
    else if (onPlay and select) {
        playPrompt = true
        onContinue = true
        onPlay = false
    }
    else if (onSettings and select) {
        room_goto(Rm_Settings)
    }
    else if (onContinue and select) {
        if(target == Rm_1) {
            room_goto(Rm_FallingCutscene)
        }
        else {
            room_goto(Rm_GameStart)
        }
    }
    else if (onNewGame and select) {
        newGamePrompt = true
        playPrompt = false
        onNewGame = false
        onNewGameNo = true
    }
    else if (onNewGameYes and select) {
        file_delete("SaveData.ini")
        room_goto(Rm_FallingCutscene)
    }
    else if (onNewGameNo and select) {
        playPrompt = true
        newGamePrompt = false
        onNewGameNo = false
        onNewGame = true
    }
    else if (onReturn and select) {
        onReturn = false
        onPlay = true
        playPrompt = false
    }
}


// Press any key
if (onPress) {
    if (keyboard_check_pressed(vk_anykey) or 
        gamepad_button_check_pressed(0, gp_face1) or
        gamepad_button_check_pressed(0, gp_face2) or
        gamepad_button_check_pressed(0, gp_face3) or
        gamepad_button_check_pressed(0, gp_face4) or
        gamepad_button_check_pressed(0, gp_start)) {
        onPress = false
        onPlay = true
    }
}

prevLH = gamepad_axis_value(0, gp_axislv)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(.7)
draw_set_font(Fnt_Title)
draw_set_color(c_maroon)
draw_set_halign(fa_center)
draw_text(room_width / 2, room_height / 20, "Maroon'd")
draw_set_font(Fnt_Heading)

if (onPress) {
    draw_set_alpha(alpha)
    draw_text(room_width / 2, room_height / 3, "Press any key")
}
else {
    if (!exitPrompt and !playPrompt and !newGamePrompt) {
        draw_set_alpha(.3)
        draw_text(room_width / 2, room_height / 2, "Play")
        draw_text(room_width / 2, (room_height / 2) + 100, "Settings")
        draw_text(room_width / 2, (room_height / 2) + 200, "Exit")
    }
}

if (!exitPrompt and !playPrompt and !newGamePrompt) {
    if (onPlay) {
        draw_set_alpha(alpha)
        draw_text(room_width / 2, room_height / 2, "Play")
    }

    if (onSettings) {
        draw_set_alpha(alpha)
        draw_text(room_width / 2, (room_height / 2) + 100, "Settings")
    }
    if (onExit) {
        draw_set_alpha(alpha)
        draw_text(room_width / 2, (room_height / 2) + 200, "Exit")
    }
}

if (exitPrompt) {
    draw_set_alpha(.35)
    draw_rectangle_colour(0,0,room_width,room_height,c_black,c_black,c_black,c_black,false)
    draw_set_alpha(1)
    draw_set_color(c_white)
    draw_text(room_width / 2, room_height / 3, "Exit Program?")
    draw_set_alpha(.3)
    draw_text(room_width / 2, (room_height / 3) + 100, "No")
    draw_text(room_width / 2, (room_height / 3) + 200, "Yes")
    
    if (onExitNo) {
        draw_set_alpha(alpha)
        draw_text(room_width / 2, (room_height / 3) + 100, "No")
    }
    
    if (onExitYes) {
        draw_set_alpha(alpha)
        draw_text(room_width / 2, (room_height / 3) + 200, "Yes")
    }
}

if (playPrompt) {
    draw_set_color(c_maroon)
    draw_set_alpha(.3)
    draw_text(room_width / 2, room_height / 2, "Continue")
    draw_text(room_width / 2, (room_height / 2) + 100, "New Game")
    draw_text(room_width / 2, (room_height / 2) + 200, "Return")
    
    if (onContinue) {
        draw_set_alpha(alpha)
        draw_text(room_width / 2, room_height / 2, "Continue")
    }

    if (onNewGame) {
        draw_set_alpha(alpha)
        draw_text(room_width / 2, (room_height / 2) + 100, "New Game")
    }
    if (onReturn) {
        draw_set_alpha(alpha)
        draw_text(room_width / 2, (room_height / 2) + 200, "Return")
    } 
}

if (newGamePrompt) {
    draw_set_color(c_maroon)
    draw_set_alpha(1)
    draw_text(room_width / 2, (room_height / 2) - 200, "Delete Save File and Start New Game?")
    draw_set_alpha(.3)
    draw_text(room_width / 2, room_height / 2, "Yes")
    draw_text(room_width / 2, (room_height / 2) + 100, "No")
    
    if (onNewGameYes) {
        draw_set_alpha(alpha)
        draw_text(room_width / 2, (room_height / 2), "Yes")
    }
    
    if (onNewGameNo) {
        draw_set_alpha(alpha)
        draw_text(room_width / 2, (room_height / 2) + 100, "No")
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(.5)
draw_rectangle_color(0,0,room_width, room_height, c_white, c_white, global.c_sky, global.c_sky, false)
draw_set_alpha(1)
draw_sprite(Spr_TitleIsland, 0, (room_width / 2) + 100, (room_height / 2) + y0)
draw_sprite(Spr_TitleIsland, 1, (room_width / 2) + 100, (room_height / 2) + y1)
draw_sprite(Spr_TitleIsland, 2, (room_width / 2) + 100, (room_height / 2) + y1)
draw_sprite(Spr_TitleIsland, 3, (room_width / 2) + 100, (room_height / 2) + y3)

xVal = xVal + (2048 / 2048)
if (xVal &gt;= 2048)
    xVal = 0
draw_background_tiled(Bkg_Clouds, xVal, 0)

draw_sprite(Spr_TitleAirship, 0, 0, room_height + y4)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
