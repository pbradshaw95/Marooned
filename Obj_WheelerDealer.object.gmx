<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_WheelerDealerRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0
yVel = 0
yVelMax = 500

moveSpeed = 100
attackSpeed = 300

hit = false
thrusting = false
facingRight = false
aggroRange = 120
aggro = false
image_speed = .2

attacking = false
damage = 10

hpMax = 50
hp = hpMax

coinRoll = random_range(0,10)
powerUpRoll = random_range(0, 10)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (coinRoll &gt; 8) {
    instance_create(x, y, Obj_Coin)
    instance_create(x, y, Obj_Coin)
    instance_create(x, y, Obj_Coin)
}
else if (coinRoll &gt; 5) {
    instance_create(x, y, Obj_Coin)
    instance_create(x, y, Obj_Coin)
}
else if (coinRoll &gt; 2) {
    instance_create(x, y, Obj_Coin)
}

if(powerUpRoll &lt; 1) instance_create(x, y, Obj_BulletTimePowerUp)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


thrusting = true
// Attack animation
image_index = 0
if(facingRight) {
    sprite_index = Spr_WheelerDealerAttackRight
    xVel = attackSpeed
}
else {
    sprite_index = Spr_WheelerDealerAttackLeft
    xVel = -attackSpeed
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(Obj_Player)) {
    if (distance_to_object(Obj_Player) &lt; aggroRange) {
        aggro = true
    }
  
    if (aggro) and (!attacking) and (!hit) {
        if (x &gt; Obj_Player.x) {
            facingRight = false
            xVel = -moveSpeed
        }
        else {
            facingRight = true
            xVel = moveSpeed
        }
        
        if (distance_to_point(Obj_Player.x, y) &lt; 75) {
            attacking = true
            alarm[0] = 60
        }
    }
}

yVel += global.grav * global.TIME_PASSED

// Horizontal Collision
if (place_meeting(x + (xVel * global.TIME_PASSED), y, Obj_Wall)) {
    while(!place_meeting(x + sign(xVel), y, Obj_Wall)) {
        x += sign(xVel);
    }
    xVel = 0
}

// Vertical Collision
if (place_meeting(x, y + (yVel * global.TIME_PASSED /* + integration */), Obj_Wall)) {
    while(!place_meeting(x, y + sign(yVel), Obj_Wall)) {
        y += sign(yVel);
    }
    yVel = 0
}

if (abs(yVel) &gt; yVelMax) {
    yVel = yVelMax * sign(yVel)
}

x += xVel * global.TIME_PASSED
y += yVel * global.TIME_PASSED

//Animation
if(facingRight and !attacking) sprite_index = Spr_WheelerDealerRight
if(!facingRight and !attacking) sprite_index = Spr_WheelerDealerLeft
if (attacking and !thrusting) {
    if (facingRight) {
        sprite_index = Spr_WheelerDealerAttackSigRight
    }
    else {
        sprite_index = Spr_WheelerDealerAttackSigLeft
    }
}

if (attacking and thrusting) {
        if (image_index &gt; image_number - 1) {
            attacking = false;
            thrusting = false
        }
}

if (hp &lt;= 0) {
    instance_create(x, y, Obj_EnemyBreak)
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Dagger">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!hit) {
    hp -= Obj_Dagger.damage
    hit = true
    alarm[1] = 25
    if(instance_exists(Obj_Player)) {
        if(!thrusting) {
            //crouch attack
            if (Obj_Player.swordHeight == Obj_Player.y + 16) {
                yVel = -350
            }
        // x knockback
            if (Obj_Player.facingRight) {
                xVel = 100
            }
            else {
                xVel = -100
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

if (aggro) {
if (hp &gt; (hpMax * 2 / 3)) {
    draw_healthbar(x - 20, y - 50, x + 20, y - 47, 100 * hp / hpMax,c_black, c_green, c_green, 0, true, false)
}
else if (hp &lt;= (hpMax * 2 / 3)) and (hp &gt; (hpMax / 3)) {
    draw_healthbar(x - 20, y - 50, x + 20, y - 47, 100 * hp / hpMax,c_black, c_yellow, c_yellow, 0, true, false)
}
else {
    draw_healthbar(x - 20, y - 50, x + 20, y - 47, 100 * hp / hpMax,c_black, c_red, c_red, 0, true, false)
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
