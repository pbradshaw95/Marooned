<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_IdleLeftDagger</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

image_index = 0
image_speed = 0
xVel = 0
yVel = 0
xMove = 180
yVelMax = 500
jumpVel = 2.5 * 72 * 180 / 64

ini_open("SaveData.ini")
swordLevel = ini_read_real("Upgrades","Sword",0)
hpMax = ini_read_real("Upgrades", "Health", 100)
ini_close()

dashing = false
dashReady = true
invincible = false

airborne = false

passDown = false

crouching = false
runningLeft = false
runningRight = false
launch = false
swordReady = true
gunReady = true
facingRight = true
facingUp = false
facingDown = false
swordHeight = y - 16
attacking = false
gunAmmo = 1

hit = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>passDown = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>launch = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invincible = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gunReady = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>swordReady = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_left = -keyboard_check(ord("A"))
key_right = keyboard_check(ord("D"))
key_down = keyboard_check(ord("S"))
key_up = -keyboard_check(ord("W"))
key_jump = keyboard_check_pressed(vk_space) or keyboard_check_pressed(ord("K"))
key_jump_held = keyboard_check(vk_space) or keyboard_check(ord("K"))
key_sword = keyboard_check_pressed(ord("J"))
key_gun = keyboard_check_pressed(ord("K"))
key_pause = keyboard_check_pressed(vk_enter) or keyboard_check_pressed(vk_escape)
if (gamepad_axis_value(0, gp_axislh) &gt; .25) {
    key_right = 1
}
if (gamepad_axis_value(0, gp_axislh) &lt; -.25) {
    key_left = -1
}
if (gamepad_axis_value(0, gp_axislv) &lt; -.25) {
    key_up = -1
}
if (gamepad_axis_value(0, gp_axislv) &gt; .4) {
    key_down = 1
}
if (gamepad_button_check_pressed(0, gp_face1)) {
    key_jump = 1
}
if (gamepad_button_check(0, gp_face1)) {
    key_jump_held = 1
}
if (gamepad_button_check_pressed(0, gp_face3)) {
    key_sword = 1
}
if (gamepad_button_check_pressed(0, gp_start)) {
    key_pause = 1
}



dir = key_left + key_right
vDir = key_up + key_down

if(dir == -1) {
    facingRight = false
}
else if(dir == 1) {
    facingRight = true
}
if(vDir == 1) {
    facingDown = true
}
else if(vDir == -1){
    facingUp = true
}
else {
    facingUp = false
    facingDown = false
}

if((attacking or crouching) and !airborne) dir = 0
xVel = dir * xMove * global.TIME_PASSED;

// integration = (global.grav * global.TIME_PASSED * global.TIME_PASSED / 2)

if (place_meeting(x, y+1, Obj_Wall)) and (yVel &gt;= 0) {
    airborne = false
    if(!attacking)
        yVel = key_jump * -jumpVel
    
    if (key_jump == 1)
        launch = false
        alarm[3] = 6 / global.SPD
}
else {
    airborne = true
}


if (yVel &lt; yVelMax) and airborne {
    yVel += global.grav * global.TIME_PASSED
}

/*
// Diagonal Collision
if(xVel != 0) and (yVel != 0)
if(place_meeting(x + xVel, y + (yVel * global.TIME_PASSED), Obj_Wall))
{
    while(!place_meeting(x + sign(xVel), y + sign(yVel), Obj_Wall))
    {
        y += sign(yVel);
    }
    xVel = 0;
    yVel = 0;
}
*/

// Variable Jump Height
if ((yVel &lt; 0) and (!key_jump_held)) {
    yVel = yVel / 1.08
}

// Horizontal Collision
if (place_meeting(x + xVel, y, Obj_Wall)) {
    while(!place_meeting(x + sign(xVel), y, Obj_Wall)) {
        x += sign(xVel);
    }
    xVel = 0
}

// Vertical Collision
if (place_meeting(x, y + (yVel * global.TIME_PASSED /* + integration */), Obj_Wall)) {
    while(!place_meeting(x, y + sign(yVel), Obj_Wall)) {
        y += sign(yVel);
    }
    yVel = 0
}

if (facingDown and !airborne and !attacking) {
    crouching = true
    if(swordLevel == 0) {
        if (!facingRight) sprite_index = Spr_CrouchLeftDagger
        if (facingRight) sprite_index = Spr_CrouchRightDagger        
    }
    if(swordLevel == 1) {
        if (!facingRight) sprite_index = Spr_CrouchLeftSword
        if (facingRight) sprite_index = Spr_CrouchRightSword        
    }
    if (key_jump and place_meeting(x, y+1, Obj_Platform)) {
        yVel = 80
        passDown = true
        alarm[5] = 3
    }
}
else if (!airborne) and (!attacking) and (!runningLeft and !runningRight){
    if(swordLevel == 0) {
        if (!facingRight) sprite_index = Spr_IdleLeftDagger
        if (facingRight) sprite_index = Spr_IdleRightDagger
    }
    if(swordLevel == 1) {
        if (!facingRight) sprite_index = Spr_IdleLeftSword
        if (facingRight) sprite_index = Spr_IdleRightSword
    }
}
if(!facingDown) crouching = false


// Jump Sprite
if (yVel &gt; 0) {
    if(!attacking) {
    if(swordLevel == 0) {
        if (!facingRight) sprite_index = Spr_LandingLeftDagger
        if (facingRight) sprite_index = Spr_LandingRightDagger
    }
    if(swordLevel == 1) {
        if (!facingRight) sprite_index = Spr_LandingLeftSword
        if (facingRight) sprite_index = Spr_LandingRightSword
    }
    }
}
else if (yVel &lt; 0) {
   // if (launch) {
        if(!attacking) {
        if(swordLevel == 0) {
            if (!facingRight) sprite_index = Spr_JumpLeftDagger
            if (facingRight) sprite_index = Spr_JumpRightDagger
        }
        if(swordLevel == 1) {
            if (!facingRight) sprite_index = Spr_JumpLeftSword
            if (facingRight) sprite_index = Spr_JumpRightSword
        }
        }
   // }
   // else {
   //     if(swordLevel == 0) {
   //         if (!facingRight) sprite_index = Spr_LaunchLeftDagger
   //         if (facingRight) sprite_index = Spr_LaunchRightDagger
   //     }
   // }
}

// running animation
if(yVel == 0) {
    if(place_meeting(x, y+1, Obj_Wall)) {
        if (dir == -1) and !runningLeft and !attacking {
            sprite_index = Spr_RunLeft
            image_speed = .15 * global.SPD
            runningLeft = true
            runningRight = false
        }
        if (dir == 1) and !runningRight and !attacking {
            image_speed = .15 * global.SPD
            sprite_index = Spr_RunRight
            runningRight = true
            runningLeft = false
        }
        if(dir == 0){
            runningLeft = false
            runningRight = false
        }
        global.uckfay = true
    }
    else {
        runningLeft = false
        runningRight = false
    }
}
else {
    runningLeft = false
    runningRight= false
}


x += xVel
//if (yVel != 0) {
    y += yVel * global.TIME_PASSED // + integration
//}

if (key_down) {
    swordHeight = y + 16
}
else {
    swordHeight = y - 16
}

// Sword
if (key_sword) {
    if (swordReady) {
        alarm[0] = 20
        //if(!airborne) {
            if(swordLevel == 0) {
            // Fix with Up-tilt
                /*
                if (facingUp) {
                    // instance_create(x, y - 64, Obj_SwordUp)
                }
                */
                
                if (facingRight) {
                    if(swordHeight == y + 16) {
                        instance_create(x + 32, swordHeight, Obj_Dagger)
                        attacking = true
                        image_speed = .5 * global.SPD
                        image_index = 0
                        if(swordLevel == 0) {
                            sprite_index = Spr_CrouchAttackRightDagger
                        }
                    }
                    if(swordHeight == y - 16) {
                        instance_create(x + 48, swordHeight, Obj_Dagger)
                        instance_create(x + 48, y, Obj_Dagger)
                        attacking = true
                        image_speed = .5 * global.SPD
                        image_index = 0
                        if(swordLevel == 0) {
                        sprite_index = Spr_AttackRightDagger
                        }
                    }
                }
                else {
                    
                    if(swordHeight == y + 16) {
                        instance_create(x - 32, swordHeight, Obj_Dagger)
                        attacking = true
                        image_speed = .5 * global.SPD
                        image_index = 0
                        sprite_index = Spr_CrouchAttackLeftDagger
                    }
                    if(swordHeight == y - 16) {
                        instance_create(x - 48, swordHeight, Obj_Dagger)
                        instance_create(x - 48, y, Obj_Dagger)
                        attacking = true
                        image_speed = .5 * global.SPD
                        image_index = 0
                        sprite_index = Spr_AttackLeftDagger
                    }
                }
            }
            if (swordLevel == 1) {
                if (facingRight) {
                    if(swordHeight == y + 16) {
                        instance_create(x + 48, swordHeight, Obj_Sword)
                        attacking = true
                        image_speed = .5 * global.SPD
                        image_index = 0
                        if(swordLevel == 1) {
                            sprite_index = Spr_CrouchAttackRightSword
                        }
                    }
                    if(swordHeight == y - 16) {
                        instance_create(x + 48, swordHeight, Obj_Sword)
                        instance_create(x + 48, y, Obj_Sword)
                        attacking = true
                        image_speed = .5 * global.SPD
                        image_index = 0
                        if(swordLevel == 1) {
                        sprite_index = Spr_AttackRightSword
                        }
                    }
                }
                else {
                    
                    if(swordHeight == y + 16) {
                        instance_create(x - 48, swordHeight, Obj_Sword)
                        attacking = true
                        image_speed = .5 * global.SPD
                        image_index = 0
                        sprite_index = Spr_CrouchAttackLeftSword
                    }
                    if(swordHeight == y - 16) {
                        instance_create(x - 48, swordHeight, Obj_Sword)
                        instance_create(x - 48, y, Obj_Sword)
                        attacking = true
                        image_speed = .5 * global.SPD
                        image_index = 0
                        sprite_index = Spr_AttackLeftSword
                    }
                }
            }
            else {
            // Fix Up air and Down air 
            
                /*
                if (facingUp) {
                    instance_create(x, y - 64, Obj_SwordUp)
                }
                else if (facingDown) {
                    instance_create(x, y + 64, Obj_SwordDown)
                }
                */
                
                if (facingRight) {
                    instance_create(x + 48, y - 16, Obj_Dagger)
                }
                else {
                    instance_create(x - 48, y - 16, Obj_Dagger)
                }
            }
      //  }
        swordReady = false
    }
}

if (attacking) {
    if image_speed &gt; 0
    {
        if (image_index &gt; image_number - 1) {
            attacking = false;
        }
    }
}
else if (!runningLeft and !runningRight){
    image_index = 0
    image_speed = 0
}
/*

// Gun
if (key_gun) {
    if ((gunAmmo &gt; 0) and gunReady) {
        alarm[1] = 15
        if (airborne and facingDown) {
            instance_create(x, y + 32, Obj_Bullet)
        }
        else if (facingUp) {
            instance_create(x, y - 32, Obj_Bullet)
        }
        else if (facingRight) {
            instance_create(x + 48, swordHeight, Obj_Bullet)
        }
        else {
            instance_create(x - 48, swordHeight, Obj_Bullet)
        }
        gunReady = false
    }
}

*/

if (key_pause) {
    instance_create(x,y,Obj_Pause)
}
if (global.playerHP &lt;= 0) {
    room_goto(Rm_GameOver)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!hit) {
    global.playerHP -= Obj_Enemy.damage
    hit = true
    alarm[4] = 45
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(Fnt_Instructions)
draw_set_halign(fa_left)
draw_set_colour(c_black)
draw_text(8, 8, "HP")
draw_set_color(c_white)
draw_text(7, 7, "HP")


if (hpMax == 100) {
    if (global.playerHP &gt; (hpMax / 2)) {
        draw_healthbar(42, 8, 152, 24, (global.playerHP / hpMax) * 100, c_black, c_green, c_green, 0, true, true)
    }
    else if (global.playerHP &lt;= (hpMax / 2 )) and (global.playerHP &gt; (hpMax / 4)) {
        draw_healthbar(42, 8, 152, 24, (global.playerHP / hpMax) * 100, c_black, c_orange, c_yellow, 0, true, true)
    }
    else {
        draw_healthbar(42, 8, 152, 24, (global.playerHP / hpMax) * 100, c_black, c_red, c_orange, 0, true, true)
    }

    draw_sprite(Spr_HealthBarUI, 0, 16, 4)
}

if (hpMax == 120) {
    if (global.playerHP &gt; (hpMax / 2)) {
        draw_healthbar(42, 8, 176, 24, (global.playerHP / hpMax) * 100, c_black, c_green, c_green, 0, true, true)
    }
    else if (global.playerHP &lt;= (hpMax / 2 )) and (global.playerHP &gt; (hpMax / 4)) {
        draw_healthbar(42, 8, 176, 24, (global.playerHP / hpMax) * 100, c_black, c_orange, c_yellow, 0, true, true)
    }
    else {
        draw_healthbar(42, 8, 176, 24, (global.playerHP / hpMax) * 100, c_black, c_red, c_orange, 0, true, true)
    }

    draw_sprite(Spr_HealthBarUI, 1, 16, 4)
}

if (hpMax == 140) {
    if (global.playerHP &gt; (hpMax / 2)) {
        draw_healthbar(42, 8, 200, 24, (global.playerHP / hpMax) * 100, c_black, c_green, c_green, 0, true, true)
    }
    else if (global.playerHP &lt;= (hpMax / 2 )) and (global.playerHP &gt; (hpMax / 4)) {
        draw_healthbar(42, 8, 200, 24, (global.playerHP / hpMax) * 100, c_black, c_orange, c_yellow, 0, true, true)
    }
    else {
        draw_healthbar(42, 8, 200, 24, (global.playerHP / hpMax) * 100, c_black, c_red, c_orange, 0, true, true)
    }

    draw_sprite(Spr_HealthBarUI, 2, 16, 4)
}

if (hpMax == 160) {
    if (global.playerHP &gt; (hpMax / 2)) {
        draw_healthbar(42, 8, 224, 24, (global.playerHP / hpMax) * 100, c_black, c_green, c_green, 0, true, true)
    }
    else if (global.playerHP &lt;= (hpMax / 2 )) and (global.playerHP &gt; (hpMax / 4)) {
        draw_healthbar(42, 8, 224, 24, (global.playerHP / hpMax) * 100, c_black, c_orange, c_yellow, 0, true, true)
    }
    else {
        draw_healthbar(42, 8, 224, 24, (global.playerHP / hpMax) * 100, c_black, c_red, c_orange, 0, true, true)
    }

    draw_sprite(Spr_HealthBarUI, 3, 16, 4)
}

if (hpMax == 180) {
    if (global.playerHP &gt; (hpMax / 2)) {
        draw_healthbar(42, 8, 248, 24, (global.playerHP / hpMax) * 100, c_black, c_green, c_green, 0, true, true)
    }
    else if (global.playerHP &lt;= (hpMax / 2 )) and (global.playerHP &gt; (hpMax / 4)) {
        draw_healthbar(42, 8, 248, 24, (global.playerHP / hpMax) * 100, c_black, c_orange, c_yellow, 0, true, true)
    }
    else {
        draw_healthbar(42, 8, 248, 24, (global.playerHP / hpMax) * 100, c_black, c_red, c_orange, 0, true, true)
    }

    draw_sprite(Spr_HealthBarUI, 4, 16, 4)
}

if (hpMax == 200) {
    if (global.playerHP &gt; (hpMax / 2)) {
        draw_healthbar(42, 8, 261, 24, (global.playerHP / hpMax) * 100, c_black, c_green, c_green, 0, true, true)
    }
    else if (global.playerHP &lt;= (hpMax / 2 )) and (global.playerHP &gt; (hpMax / 4)) {
        draw_healthbar(42, 8, 261, 24, (global.playerHP / hpMax) * 100, c_black, c_orange, c_yellow, 0, true, true)
    }
    else {
        draw_healthbar(42, 8, 261, 24, (global.playerHP / hpMax) * 100, c_black, c_red, c_orange, 0, true, true)
    }

    draw_sprite(Spr_HealthBarUI, 5, 16, 4)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -1
if (hit) image_alpha = .5
else image_alpha = 1
draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
